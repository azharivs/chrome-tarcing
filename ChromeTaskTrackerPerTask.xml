<?xml version="1.0" encoding="UTF-8"?>
<tmfxml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../org.eclipse.tracecompass.tmf.analysis.xml.core/src/org/eclipse/tracecompass/tmf/analysis/xml/core/module/xmlDefinition.xsd">
	
<callstack id="lttng.ust.chromecallstacktask.analysis">
    			
    <callstackGroup name="ChromeTasksThreads">		
   		<level path="Tasks/*" />
   		<level path="Threads/*/" />
		<thread cpu="cpu" />
    </callstackGroup>

    <pattern version="1" id="ca.polymtl.chromecallstacktask">
        <head>
            <traceType id="org.eclipse.linuxtools.lttng2.ust.tracetype" />
            <traceType id="org.eclipse.linuxtools.tmf.core.experiment.generic" />
            <label value="Chrome Task Analysis" />
        </head>   
        
        <definedValue name="first_task" value="0" />


        <location id="CurrentThread">
        	<stateAttribute type="constant" value="Threads" />
		<stateAttribute type="query">
			<stateAttribute type="constant" value="#CurrentScenario" />
			<stateAttribute type="constant" value="threadID" />
		</stateAttribute>
    	</location>
	 <location id="CurrentTask">
        	<stateAttribute type="constant" value="Tasks" />
		<stateAttribute type="query">
			<stateAttribute type="constant" value="#CurrentScenario" />
			<stateAttribute type="constant" value="taskID" />
		</stateAttribute>
		<stateAttribute type="constant" value="Threads" />
		<stateAttribute type="query">
			<stateAttribute type="constant" value="#CurrentScenario" />
			<stateAttribute type="constant" value="threadID" />
		</stateAttribute>
    	</location>
    	
    	
    	<!-- callstack process="Views/*" thread="Threads/*" callstack="callstack" / -->
	        
		<patternHandler>
		
			<!-- CONDITIONS -->
		
			<!-- Test if the current running thread is equal to the current scenario thread -->
			<test id="same_kthread">
				<if>
					<condition>
						<stateValue type="eventField" value="context._vtid" />
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="threadID" />
						</stateValue>
					</condition>
				</if>
			</test>
			<test id="same_thread">
				<if>
					<condition>
						<stateValue type="eventField" value="context._vtid" />
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="threadID" />
						</stateValue>
					</condition>
				</if>
			</test>
			<test id="same_taskID">
				<if>
					<condition>
						<stateValue type="eventField" value="TaskID" />
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="cTaskID" />
						</stateValue>
					</condition>
				</if>
			</test>
	<!--		<test id="first_task">
				<if>
					<condition>

						<definedValue name="first_task"/>
						<stateValue type="int" value="0" />

					</condition>
				</if>
			</test>  -->
			<test id="IsEventRunTaskLoop">
				<if>
					<condition>
						<stateValue type="eventField" value="name" forcedType="string"/>
						<stateValue type="string" value="MessageLoop::RunTask" />
					</condition>
				</if>
			</test>
			<test id="IsEventOpenTab">
				<if>
					<condition>
						<stateValue type="eventField" value="name" forcedType="string"/>
						<stateValue type="string" value="NavigationControllerImpl::LoadURLWithParams" />
					</condition>
				</if>
			</test>
			<test id="IsEventTakeTask">
				<if>
					<condition>
						<stateValue type="eventField" value="name" forcedType="string"/>
						<stateValue type="string" value="SequenceManagerImpl::TakeTask" />
					</condition>
				</if>
			</test>
			<test id="IsEventTaskStarted">
				<if>
					<condition>
						<stateValue type="eventField" value="name" forcedType="string"/>
						<stateValue type="string" value="TaskQueueImpl::OnTaskStarted" />
					</condition>
				</if>
			</test>
			<test id="IsEventTaskCompleted">
				<if>
					<condition>
						<stateValue type="eventField" value="name" forcedType="string"/>
						<stateValue type="string" value="TaskQueueImpl::OnTaskCompleted" />
					</condition>
				</if>
			</test>
			<!-- ACTIONS -->
	
			<action id="ensure_thread_present">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
					<if>
						<condition>
						<stateValue type="query">
							<stateAttribute type="constant" value="Threads" />
							<stateAttribute type="eventField" value="context._vtid" />
	                    				<stateAttribute type="constant" value="CallStack" /> 
						</stateValue>
						<stateValue type="null"/>
						</condition>		
					</if>
					
					<then>
	                    			<stateAttribute type="constant" value="Threads" />
						<stateAttribute type="eventField" value="context._vtid" />
	                    			<stateAttribute type="constant" value="CallStack" />  
						<stateValue type="string" value="StartofThread" stack="push"/>    
					</then>  
	            		</stateChange>
			</action>


			<!-- Actions and test for time graph view threads -->
			<action id="entering_request_old">
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="context._vtid" />
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="apacheUri" />
					<stateValue type="eventField" value="uri" />
				</stateChange>
			</action>

			
		
			<action id="push_uri">
				<!-- Push the current event to the thread's callstack -->
				
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="main function" stack="push"/>     
	            		</stateChange>
			</action>
		<action id="push_join">
				<!-- Push the current event to the thread's callstack -->
				
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="join threads" stack="push"/>     
	            		</stateChange>
			</action>
		<action id="push_exit">
				<!-- Push the current event to the thread's callstack -->
				
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="exit threads" stack="push"/>     
	            		</stateChange>
			</action>
	
			<action id="pop_uri">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="pop"/>     
	            		</stateChange>
			</action>
	
			
			<action id="push_event_type">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" value="funcname" stack="push"/>     
	            		</stateChange>
			</action>
	
			<action id="pop_event_type">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" value="funcname" stack="pop"/>     
	            		</stateChange>
			</action>


			<action id="push_event_name">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="push"/>     
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
	           
			</action>
	
			<action id="pop_event_name">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentTask" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="pop"/>     
	            		</stateChange>
			</action>
			<action id="pop_all">
				<!-- Pop the current event from the callstack -->
	                    	<stateChange>
	                    		<stateAttribute type="location" value="CurrentTask" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventName" stack="pop"/>     
	            		</stateChange>
			</action>
			<action id="push_running">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="thread running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_runtask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Running a task" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_newtask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="Taking Task and waiting for start" stack="push"/>   
	            		</stateChange>
			</action>
			<action id="push_thread_start">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="Thread start" stack="push"/>   
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_control_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task control_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_default_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task default_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_unthrottled_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task unthrottled_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_frame_loading_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task frame_loading_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_frame_throttleable_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task frame_throttleable_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_frame_deferrable_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task frame_deferrable_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_frame_pausable_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task frame_pausable_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_frame_unpausable_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task frame_unpausable_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_compositor_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task compositor_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_idle_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task idle_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_test_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task test_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_frame_loading_control_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task frame_loading_control_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_v8_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task v8_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_ipc_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task ipc_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_input_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task input_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_detached_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task detached_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_cleanup_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task cleanup_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_other_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task other_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_subthread_default_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task subthread_default_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_TaskStarted_subthread_control_tq">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Task subthread_control_tq running" stack="push"/>    
	            		</stateChange>
			</action>
			<action id="push_open_tab">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="Opening a new tab" stack="push"/>   
	            		</stateChange>
			</action>
			<action id="push_OnKeyEvent">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="OnKeyEvent" stack="push"/>   
	            		</stateChange>
			</action>
			<action id="push_OnMouseEvent">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="OnMouseEvent" stack="push"/>   
	            		</stateChange>
			</action>
			<action id="push_OnScrollEvent">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="OnScrollEvent" stack="push"/>   
	            		</stateChange>
			</action>
			<action id="push_OnTouchEvent">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="OnTouchEvent" stack="push"/>   
	            		</stateChange>
			</action>
			<action id="push_OnGestureEvent">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="OnGestureEvent" stack="push"/>   
	            		</stateChange>
			</action>
			<action id="push_LayerTreeHostImpl_BeginCommit">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<!--<stateValue type="eventName" stack="push"/>  -->
					<stateValue type="string" value="LayerTree committing" stack="push"/>   
	            		</stateChange>
			</action>

			<action id="push_set_opener_for_new_contents">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="SetOpenerForNewContents" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_get_frame_tree">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Get Frame Tree" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_pending_frame_policy">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Pending Frame Policy" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_new_root_SetPendingFramePolicy">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Set Pending Frame Policy" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_new_root_CommitPendingFramePolicy">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Commit Pending Frame Policy" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_new_contents_Init">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="New Content Init" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_site_instance_create">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Site Instance Create" stack="push"/>    
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_PreventAssociationWithSpareProcess">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Prevent Association With Spare Process" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_site_instance_GetProcess_GetNextRoutingID">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="GetProcess_GetNextRoutingID" stack="push"/>    
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
<!--			<action id="push_RenderProcessHostImpl_GetNextRoutingID">
		 Push the current event to the thread's callstack 
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Opening a new tab" stack="push"/>    
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="New Content Init" stack="push"/>    
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="GetProcess_GetNextRoutingID" stack="push"/>    
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="RenderProcessHostImpl_GetNextRoutingID" stack="push"/>    
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>   -->
			<action id="push_GetRenderManager_Init">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="GetRenderManager_Init" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_frame_tree_root_SetFrameName">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Frame_tree_root_SetFrameName" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_GetContentClient_browser_GetWebContentsViewDelegate">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="GetContentClient_browser_GetWebContentsViewDelegate" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_view_reset_WebContentsViewChildFrame">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="View_reset_WebContentsViewChildFrame" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_view_reset_CreateWebContentsView">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="View_reset_CreateWebContentsView" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_view_CreateView">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="View_CreateView" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_NotificationRegistrar_Add">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="NotificationRegistrar_Add" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueue_ReloadEmptyImmediateQueue">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueue_ReloadEmptyImmediateQueue" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueue_BlockedByFence">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueue_BlockedByFence" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueueSets_OnTaskPushedToEmptyQueue">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueueSets_OnTaskPushedToEmptyQueue" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueue_GetFrontTaskEnqueueOrder">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueue_GetFrontTaskEnqueueOrder" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueueSets_GetOldestQueueAndEnqueueOrderInSet">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueueSets_GetOldestQueueAndEnqueueOrderInSet" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueueSets_GetOldestQueueInSet">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueueSets_GetOldestQueueInSet" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueueSets_IsSetEmpty">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueueSets_IsSetEmpty" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueue_RemoveAllCanceledTasksFromFront">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueue_RemoveAllCanceledTasksFromFront" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueue_GetFrontTask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueue_GetFrontTask" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueue_TakeTaskFromWorkQueue">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueue_TakeTaskFromWorkQueue" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_WorkQueueSets_OnPopQueue">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="WorkQueueSets_OnPopQueue" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_TaskQueue_TaskTiming_RecordTaskStart">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="TaskQueue_TaskTiming_RecordTaskStart" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_SchedulerWorker_Delegate_WaitForWork">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="SchedulerWorker_Delegate_WaitForWork" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_SchedulerWorker_GetLastUsedTime">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="SchedulerWorker_GetLastUsedTime" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_PriorityQueue_Transaction_IsEmpty">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="PriorityQueue_Transaction_IsEmpty" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_PriorityQueue_Transaction_PeekSortKey">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="PriorityQueue_Transaction_PeekSortKey" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_PriorityQueue_Transaction_PopSequence">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="PriorityQueue_Transaction_PopSequence" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_TaskTracker_RunAndPopNextTask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="TaskTracker_RunAndPopNextTask" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_Sequence_TakeTask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Sequence_TakeTask" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_TaskTracker_BeforeRunTask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="TaskTracker_BeforeRunTask" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_TaskTracker_AfterRunTask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="TaskTracker_AfterRunTask" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_TaskTracker_RunTask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="TaskTracker_RunTask" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_Sequence_Pop">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Sequence_Pop" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			<action id="push_SchedulerWorker_BeginUnusedPeriod">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="SchedulerWorker_BeginUnusedPeriod" stack="push"/>    
	            		</stateChange>

				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>

			
			<action id="push_task_queued">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Task_Queued" stack="push"/>    
	            		</stateChange>

			</action>

			<action id="push_RunAndPopNextTask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Run_and_Pop_Next_Task" stack="push"/>    
	            		</stateChange>

			</action>

			<action id="push_run_task">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentTask" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Running Task" stack="push"/>    
	            		</stateChange>

			</action>

			<action id="push_RunOrSkipTask">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Run_or_Skip_Task" stack="push"/>    
	            		</stateChange>

			</action>


			<action id="push_load_page">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="CallStack" />
	<!--				<stateValue type="eventName" stack="push"/>    -->
					<stateValue type="string" value="Loading a webpage" stack="push"/>    
	            		</stateChange>
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentThread" />
	                    		<stateAttribute type="constant" value="cpu" />
					<stateValue type="eventField" value="cpu" />
				</stateChange>
			</action>
			<action id="push_cTaskID">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="cTaskID" />
					<stateValue type="eventField" value="TaskID" />
				</stateChange>
			</action>

			<action id="push_task_posted">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentTask" />
	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Task_Posted" stack="push"/>    
	            		</stateChange>

			</action>
			<action id="push_take_task">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
	                    		<stateAttribute type="location" value="CurrentTask" />

	                    		<stateAttribute type="constant" value="CallStack" />
					<stateValue type="string" value="Take_Task" stack="push"/>    
	            		</stateChange>

			</action>
			
			<action id="entering_request">
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="context._vtid" />
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="taskID" />
					<stateValue type="eventField" value="TaskID" />
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="cTaskID" />
					<stateValue type="eventField" value="TaskID" />
				</stateChange>
			</action>

			<action id="entering_request2">
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="taskID" />
					<stateValue type="eventField" value="TaskID" />
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="cTaskID" />
					<stateValue type="eventField" value="TaskID" />
				</stateChange>
			</action>
			<!--<fsm id="Chrome_analysis" initial="new_task">
				<state id="new_task">

				</state> 
				<state id="in_thread">

					<transition event="chrome:CoordinatorProxy_StopAndFlush" target="end_thread" action="pop_all"/>
				</state>
				<final id="end_thread"/>
			</fsm> -->
			<fsm id="Chrome_task_analysis" initial="new_task">
				<state id="new_task">
					<transition event="chrome5:TaskTracker_WillPostTask" target="in_thread" action="entering_request:push_task_posted"/> 
				</state> 
				<state id="in_thread">			
					<transition event="chrome4:TaskAnnotator_WillQueueTask" cond="same_thread:same_taskID" target="in_thread" action="pop_event_name"/>
					<transition event="chrome5:TaskTracker_RunAndPopNextTask" target="in_thread" action="entering_request:push_take_task"/> 
					<transition event="chrome4:TaskAnnotator_RunTask" cond="same_thread:same_taskID" target="in_thread" action="pop_event_name:push_run_task"/>
					<transition event="chrome4:TaskAnnotator_Task_Completed" cond="same_thread:same_taskID" target="end_thread" action="pop_event_name"/>
					<transition event="chrome:CoordinatorProxy_StopAndFlush" target="end_thread" action="pop_all"/>
				</state>
				<final id="end_thread"/>
			</fsm>
	
			<!--<fsm id="Chrome_analysis" initial="new_task">
				<state id="new_task">
					<transition event="chrome5:TaskTracker_WillPostTask" target="in_thread" action="entering_request:push_task_posted"/> 
				</state> 
				<state id="in_thread">
					<transition event="chrome4:TaskAnnotator_Task_Completed" cond="same_taskID" target="end_thread" action="pop_event_name"/>
					<transition event="chrome:CoordinatorProxy_StopAndFlush" target="end_thread" action="pop_all"/>
				</state>
				<final id="end_thread"/> 
			</fsm> -->
			

		</patternHandler>
	</pattern>
</callstack>
</tmfxml>

